// Code generated by counterfeiter. DO NOT EDIT.
package appfakes

import (
	"sync"

	"github.com/vitakras/libinput-gestures/pkg/app"
	"github.com/vitakras/libinput-gestures/pkg/libinput"
)

type FakeDebugStreamer struct {
	StartStub        func() error
	startMutex       sync.RWMutex
	startArgsForCall []struct{}
	startReturns     struct {
		result1 error
	}
	startReturnsOnCall map[int]struct {
		result1 error
	}
	ReadStub        func() *libinput.DebugEvent
	readMutex       sync.RWMutex
	readArgsForCall []struct{}
	readReturns     struct {
		result1 *libinput.DebugEvent
	}
	readReturnsOnCall map[int]struct {
		result1 *libinput.DebugEvent
	}
	ClosedStub        func() bool
	closedMutex       sync.RWMutex
	closedArgsForCall []struct{}
	closedReturns     struct {
		result1 bool
	}
	closedReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDebugStreamer) Start() error {
	fake.startMutex.Lock()
	ret, specificReturn := fake.startReturnsOnCall[len(fake.startArgsForCall)]
	fake.startArgsForCall = append(fake.startArgsForCall, struct{}{})
	fake.recordInvocation("Start", []interface{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.startReturns.result1
}

func (fake *FakeDebugStreamer) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeDebugStreamer) StartReturns(result1 error) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDebugStreamer) StartReturnsOnCall(i int, result1 error) {
	fake.StartStub = nil
	if fake.startReturnsOnCall == nil {
		fake.startReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDebugStreamer) Read() *libinput.DebugEvent {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct{}{})
	fake.recordInvocation("Read", []interface{}{})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.readReturns.result1
}

func (fake *FakeDebugStreamer) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeDebugStreamer) ReadReturns(result1 *libinput.DebugEvent) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 *libinput.DebugEvent
	}{result1}
}

func (fake *FakeDebugStreamer) ReadReturnsOnCall(i int, result1 *libinput.DebugEvent) {
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 *libinput.DebugEvent
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 *libinput.DebugEvent
	}{result1}
}

func (fake *FakeDebugStreamer) Closed() bool {
	fake.closedMutex.Lock()
	ret, specificReturn := fake.closedReturnsOnCall[len(fake.closedArgsForCall)]
	fake.closedArgsForCall = append(fake.closedArgsForCall, struct{}{})
	fake.recordInvocation("Closed", []interface{}{})
	fake.closedMutex.Unlock()
	if fake.ClosedStub != nil {
		return fake.ClosedStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closedReturns.result1
}

func (fake *FakeDebugStreamer) ClosedCallCount() int {
	fake.closedMutex.RLock()
	defer fake.closedMutex.RUnlock()
	return len(fake.closedArgsForCall)
}

func (fake *FakeDebugStreamer) ClosedReturns(result1 bool) {
	fake.ClosedStub = nil
	fake.closedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDebugStreamer) ClosedReturnsOnCall(i int, result1 bool) {
	fake.ClosedStub = nil
	if fake.closedReturnsOnCall == nil {
		fake.closedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.closedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDebugStreamer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	fake.closedMutex.RLock()
	defer fake.closedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDebugStreamer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ app.DebugStreamer = new(FakeDebugStreamer)
